[1mdiff --git a/src/components/chess.tsx b/src/components/chess.tsx[m
[1mindex 962dce1..a3d3be6 100644[m
[1m--- a/src/components/chess.tsx[m
[1m+++ b/src/components/chess.tsx[m
[36m@@ -1,5 +1,7 @@[m
[32m+[m[32mimport { algebraicNotation } from "@/lib/chess-moves";[m
 import type { RootState } from "@/store";[m
[31m-import { movePiece, selectPiece } from "@/store/chessSlice";[m
[32m+[m[32mimport { movePiece, nextTurn, selectPiece } from "@/store/chessSlice";[m
[32m+[m[32mimport { useEffect } from "react";[m
 import { useDispatch, useSelector } from "react-redux";[m
 [m
 [m
[36m@@ -7,6 +9,7 @@[m [mfunction ChessBoard(){[m
 [m
     const board = useSelector((state: RootState) => state.chess.board);[m
     const selected = useSelector((state: RootState) => state.chess.selected);[m
[32m+[m[32m    const target = useSelector((state: RootState) => state.chess.target);[m
     const dispatch = useDispatch();[m
 [m
     function piece(code: string){[m
[36m@@ -15,17 +18,28 @@[m [mfunction ChessBoard(){[m
         return `${colour}${upper}.svg`;[m
     }[m
     function move(index: number){ [m
[31m-        dispatch(selected == null? selectPiece(index): movePiece(index));[m
[32m+[m[32m        if(selected == null){[m
[32m+[m[32m            dispatch( selectPiece(index) );[m
[32m+[m[32m        }else{[m
[32m+[m[32m            dispatch( movePiece(index) );[m
[32m+[m[32m        }[m
     }[m
[32m+[m[32m    useEffect(() => {[m
[32m+[m[32m        if(target == null) return () => null;[m
[32m+[m[32m        console.log("setting timeout");[m
[32m+[m[32m        const timeout = setTimeout( () => dispatch(nextTurn()), 800 );[m
[32m+[m[32m        return () => clearTimeout(timeout);[m[41m [m
[32m+[m[32m    }, [target, dispatch]);[m
[32m+[m
     function background(isBlack:boolean, index:number){[m
         const canMoveTo = selected?.options.includes(index);[m
         if(canMoveTo){[m
             const bg = isBlack? "bg-gray-500": "bg-gray-200"[m
             return `${bg} border-8 border-solid border-blue-200`;[m
         }   [m
[31m-        const bg = isBlack? "bg-gray-400": "bg-white"[m
[31m-        return bg;[m
[32m+[m[32m        return isBlack? "bg-gray-400": "bg-white"[m
     }[m
[32m+[m[41m    [m
     return ([m
         <div className="grid grid-cols-8 border-2 border-black w-fit select-none">[m
         {board.map((cell, index) => {[m
[36m@@ -47,9 +61,17 @@[m [mfunction ChessBoard(){[m
 function ChessInfo(){[m
     const activePlayer = useSelector((state: RootState) => state.chess.activePlayer);[m
     const turnNumber = useSelector((state: RootState) => state.chess.turnNumber);[m
[32m+[m[32m    const selected = useSelector((state: RootState) => state.chess.selected);[m
[32m+[m[32m    const target = useSelector((state: RootState) => state.chess.target);[m[41m [m
[32m+[m
     return ([m
         <div className="mt-2 p-2 border-solid border-2 border-gray-500 w-129 font-bold">[m
[31m-            Turn {turnNumber} {activePlayer? "Black": "White"}[m
[32m+[m[32m            <span className="m-1 pl-2 pr-2 border-solid border-1 border-gray-500 rounded-sm">[m
[32m+[m[32m                Turn {turnNumber} {activePlayer? "Black": "White"}[m
[32m+[m[32m            </span>[m
[32m+[m[32m            {selected && <span className="m-1 pl-2 pr-2 border-solid border-1 border-gray-500 rounded-sm">[m
[32m+[m[32m                {algebraicNotation(selected.from)} <span>: {target && algebraicNotation(target)}</span>[m
[32m+[m[32m            </span>}[m
         </div>[m
     );[m
 }[m
[1mdiff --git a/src/lib/chess-moves.ts b/src/lib/chess-moves.ts[m
[1mindex 0fe76dc..13e5538 100644[m
[1m--- a/src/lib/chess-moves.ts[m
[1m+++ b/src/lib/chess-moves.ts[m
[36m@@ -152,4 +152,10 @@[m [mexport function validIndices(code: string, index: number, board: string[], flipp[m
         case "P": return pawnMoves(isBlack, row, col, board, flipped);[m
         default: return [];[m
     }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport function algebraicNotation(index: number){[m
[32m+[m[32m    if(index < 0 || index > 63) return "N/A";[m
[32m+[m[32m    const [row, col] = [Math.floor(index / 8),  index % 8];[m
[32m+[m[32m    return "abcdefgh"[col]+row;[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/src/store/chessSlice.ts b/src/store/chessSlice.ts[m
[1mindex 53bc956..ace6199 100644[m
[1m--- a/src/store/chessSlice.ts[m
[1m+++ b/src/store/chessSlice.ts[m
[36m@@ -12,7 +12,9 @@[m [mexport type GameState = {[m
     inCheck: boolean;[m
     board: string[];[m
     selected: null | ChessMove;[m
[32m+[m[32m    target: null | number;[m
     network: boolean;[m
[32m+[m[32m    movesMade: [number, number][];[m
 }[m
 export type ChessMove = {[m
     piece: string;[m
[36m@@ -39,7 +41,9 @@[m [mconst initialState: GameState = {[m
     inCheck: false,[m
     board: initialBoard,[m
     selected: null,[m
[32m+[m[32m    target: null,[m
     network: false,[m
[32m+[m[32m    movesMade: [],[m
 }[m
 [m
 [m
[36m@@ -48,6 +52,7 @@[m [mconst chessSlice = createSlice({[m
   initialState,[m
   reducers: {[m
     selectPiece: (state, action) => {[m
[32m+[m[32m      if(state.selected || state.target) return;[m[41m [m
       if(action.payload != null){[m
         const piece = state.board[action.payload];[m
         if(piece == null || piece == " ") return; // no piece given[m
[36m@@ -60,30 +65,38 @@[m [mconst chessSlice = createSlice({[m
           options: validIndices(piece, action.payload, state.board, boardFlipped)[m
         };[m
       }else{[m
[31m-        state.selected = null; //action.payload;[m
[32m+[m[32m        state.selected = null;[m
       }[m
     },[m
     movePiece: (state, action) => {[m
[32m+[m[32m      if(state.target != null) return;      // move made, locked out until turn passed[m[41m [m
       const targetIndex = action.payload;[m
       if(state.selected?.options.includes(targetIndex)){[m
           const nextBoard = [...state.board];[m
           nextBoard[state.selected.from] = " ";[m
           // TODO: add any piece taken to a removed list, or it could be inferred from the board[m
           nextBoard[targetIndex] = state.selected.piece;[m
[31m-          state.activePlayer ^= 1;[m
[31m-          if(state.activePlayer == 0){[m
[31m-            state.turnNumber += 1;[m
[31m-          }[m
[31m-          if(! state.network){ // flip board[m
[31m-            state.board = chunk(nextBoard, 8).reverse().flat();[m
[31m-          } else{[m
[31m-            state.board = nextBoard;[m
[31m-          }[m
[32m+[m[32m          state.target = targetIndex;[m
[32m+[m[32m          state.board = nextBoard;[m
[32m+[m[32m          state.selected.options = [];[m
[32m+[m[32m          state.movesMade.push([state.selected.from, targetIndex]);[m
[32m+[m[32m      }else{[m
[32m+[m[32m        state.selected = null;[m[41m [m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    nextTurn: (state) => {[m
[32m+[m[32m      if(! state.network){ // flip board[m
[32m+[m[32m        state.board = chunk(state.board, 8).reverse().flat();[m
       }[m
       state.selected = null;[m
[32m+[m[32m      state.target = null;[m
[32m+[m[32m      state.activePlayer ^= 1;[m
[32m+[m[32m      if(state.activePlayer == 0){[m
[32m+[m[32m        state.turnNumber += 1;[m
[32m+[m[32m      }[m
     }[m
   }[m
 });[m
 [m
[31m-export const { selectPiece, movePiece} = chessSlice.actions;[m
[32m+[m[32mexport const { selectPiece, movePiece, nextTurn} = chessSlice.actions;[m
 export default chessSlice.reducer;[m
\ No newline at end of file[m
